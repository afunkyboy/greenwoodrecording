<script setup>
import { ref, onMounted, computed, onBeforeUnmount, watch } from 'vue'
import { useBookings } from '@/composables/useBookings'
import { format, isToday, isAfter, parseISO } from 'date-fns'
import { Calendar, DatePicker } from 'v-calendar'

const { 
  bookings, 
  loading, 
  fetchBookings, 
  approveBooking, 
  rejectBooking,
  availability,
  fetchAvailability,
  updateAvailability
} = useBookings()

const isLoading = ref(true)
const selectedDate = ref(new Date())
const calendarAttributes = ref([])
const showDatePicker = ref(false)
const newUnavailableDate = ref('')

// Filter bookings
const pendingBookings = computed(() => {
  console.log('Filtering pending bookings, all bookings:', bookings.value)
  const pending = bookings.value
    .filter(b => {
      console.log(`Booking ${b.id} status:`, b.status, 'type:', typeof b.status)
      return b.status === 'pending'
    })
    .sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime())
  console.log('Pending bookings:', pending)
  return pending
})

const upcomingBookings = computed(() => {
  console.log('Filtering upcoming bookings, all bookings:', bookings.value)
  const upcoming = bookings.value
    .filter(b => {
      const isConfirmed = b.status === 'confirmed'
      const hasDates = b.preferred_dates && b.preferred_dates.length > 0
      const isUpcoming = hasDates && (new Date(b.preferred_dates[0]) >= new Date() || isToday(new Date(b.preferred_dates[0])))
      
      console.log(`Booking ${b.id}:`, {
        status: b.status,
        hasDates,
        firstDate: hasDates ? b.preferred_dates[0] : 'no dates',
        isUpcoming,
        isToday: hasDates ? isToday(new Date(b.preferred_dates[0])) : 'no dates'
      })
      
      return isConfirmed && isUpcoming
    })
    .sort((a, b) => new Date(a.preferred_dates[0]).getTime() - new Date(b.preferred_dates[0]).getTime())
  
  console.log('Upcoming bookings:', upcoming)
  return upcoming
})

const pastBookings = computed(() =>
  bookings.value
    .filter(b => b.status === 'confirmed' && 
      new Date(b.preferred_dates[0]) < new Date() && 
      !isToday(new Date(b.preferred_dates[0]))
    )
    .sort((a, b) => new Date(b.preferred_dates[0]).getTime() - new Date(a.preferred_dates[0]).getTime())
)

// Format date for display
const formatDate = (dateString) => {
  return format(new Date(dateString), 'MMM d, yyyy h:mm a')
}

// Format status badge
const statusBadgeClass = (status) => {
  switch (status) {
    case 'confirmed':
      return 'bg-green-100 text-green-800'
    case 'pending':
      return 'bg-yellow-100 text-yellow-800'
    case 'rejected':
      return 'bg-red-100 text-red-800'
    default:
      return 'bg-gray-100 text-gray-800'
  }
}

// Handle status updates
const handleApprove = async (bookingId) => {
  try {
    const success = await approveBooking(bookingId)
    if (success) {
      await refreshData()
      // Show success notification
      const notification = useNotifications()
      notification.showNotification('Booking approved successfully!', 'success')
    }
  } catch (err) {
    console.error('Error approving booking:', err)
    const notification = useNotifications()
    notification.showNotification('Failed to approve booking. Please try again.', 'error')
  }
}

const handleReject = async (bookingId) => {
  try {
    const success = await rejectBooking(bookingId)
    if (success) {
      await refreshData()
      // Show success notification
      const notification = useNotifications()
      notification.showNotification('Booking rejected successfully!', 'success')
    }
  } catch (err) {
    console.error('Error rejecting booking:', err)
    const notification = useNotifications()
    notification.showNotification('Failed to reject booking. Please try again.', 'error')
  }
}

const handleCancel = async (bookingId) => {
  if (confirm('Are you sure you want to cancel this booking?')) {
    try {
      await rejectBooking(bookingId)
      await refreshData()
    } catch (err) {
      console.error('Error cancelling booking:', err)
    }
  }
}

// Handle day click on calendar
const onDayClick = async (day) => {
  try {
    const dateStr = format(day.date, 'yyyy-MM-dd')
    const isBooked = isDateBooked(day)
    
    if (isBooked) {
      const booking = bookings.value.find(b => 
        b.status === 'confirmed' && 
        b.preferred_dates.includes(dateStr)
      )
      
      if (booking) {
        if (confirm(`Cancel booking for ${booking.client_name} on ${dateStr}?`)) {
          await handleReject(booking.id)
        }
      }
    } else {
      // Toggle availability
      const currentAvailability = availability.value.find(a => a.date === dateStr)
      const newAvailability = !currentAvailability?.is_available
      
      await updateAvailability(dateStr, newAvailability)
      
      // Update local state
      const index = availability.value.findIndex(a => a.date === dateStr)
      if (index !== -1) {
        availability.value[index].is_available = newAvailability
      } else {
        availability.value.push({
          id: Date.now(),
          date: dateStr,
          is_available: newAvailability
        })
      }
    }
    
    await refreshData()
  } catch (err) {
    console.error('Error handling day click:', err)
  }
}

// Check if a date is booked
const isDateBooked = (date) => {
  return bookings.value.some(booking => 
    booking.status === 'confirmed' && 
    booking.preferred_dates.some(d => {
      const bookingDate = new Date(d)
      return (
        bookingDate.getFullYear() === date.year &&
        bookingDate.getMonth() === date.month - 1 &&
        bookingDate.getDate() === date.day
      )
    })
  )
}

const refreshData = async () => {
  try {
    console.log('Starting data refresh...')
    await Promise.all([
      fetchBookings().then(() => {
        console.log('Bookings loaded:', bookings.value)
        console.log('Pending bookings:', pendingBookings.value)
        console.log('Upcoming bookings:', upcomingBookings.value)
      }),
      fetchAvailability()
    ])
    updateCalendarAttributes()
    console.log('Data refresh complete')
  } catch (err) {
    console.error('Error refreshing data:', err)
  } finally {
    isLoading.value = false
  }
}

// Load data on component mount
onMounted(async () => {
  try {
    await refreshData()
  } catch (err) {
    console.error('Failed to load dashboard data:', err)
  } finally {
    isLoading.value = false
  }
})

// Calendar attributes for highlighting
const updateCalendarAttributes = () => {
  const confirmedDates = []
  
  // Add confirmed bookings
  bookings.value
    .filter(booking => booking.status === 'confirmed')
    .forEach(booking => {
      booking.preferred_dates.forEach(dateStr => {
        const date = new Date(dateStr)
        confirmedDates.push({
          key: `booking-${booking.id}-${dateStr}`,
          highlight: 'green',
          dates: date,
          popover: {
            label: `${booking.client_name} - ${booking.project_details}`,
            visibility: 'hover'
          }
        })
      })
    })
  
  // Add unavailable dates
  availability.value
    .filter(a => !a.is_available)
    .forEach(avail => {
      confirmedDates.push({
        key: `unavailable-${avail.date}`,
        highlight: {
          color: 'red',
          fillMode: 'light',
          contentClass: 'opacity-75',
        },
        dates: new Date(avail.date),
        popover: {
          label: 'Unavailable',
          visibility: 'hover'
        }
      })
    })
  
  calendarAttributes.value = confirmedDates
}

// Watch for booking changes to update calendar
watch(bookings, () => {
  updateCalendarAttributes()
}, { deep: true })

watch(availability, () => {
  updateCalendarAttributes()
}, { deep: true })
</script>

<template>
  <div class="min-h-screen bg-gray-100 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Loading State -->
      <div v-if="loading" class="flex justify-center p-12">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
      
      <div v-else class="space-y-8">
        <div class="md:flex md:items-center md:justify-between">
          <div class="flex-1 min-w-0">
            <h2 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">Studio Dashboard</h2>
          </div>
        </div>

        <!-- Pending Sessions Card -->
        <div class="bg-white shadow rounded-lg overflow-hidden">
          <div class="px-6 py-5 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">Pending Approval</h3>
            <p class="mt-1 text-sm text-gray-500">Review and manage booking requests</p>
          </div>
          
          <div v-if="pendingBookings.length === 0" class="p-6 text-center text-gray-500">
            No pending bookings at this time.
          </div>
          
          <ul v-else class="divide-y divide-gray-200">
            <li v-for="booking in pendingBookings" :key="`pending-${booking.id}`" class="px-6 py-4 hover:bg-gray-50 transition-colors">
              <div class="flex items-center justify-between">
                <div class="flex-1 min-w-0">
                  <div class="flex items-center space-x-3">
                    <p class="text-sm font-medium text-gray-900 truncate">{{ booking.client_name }}</p>
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                      Pending
                    </span>
                  </div>
                  <div class="mt-1 text-sm text-gray-500">
                    <p>{{ booking.email }} â€¢ {{ booking.phone }}</p>
                    <p class="mt-1">
                      <span class="font-medium">Requested Dates:</span> 
                      {{ booking.preferred_dates.map(d => formatDate(d)).join(', ') }}
                    </p>
                    <p class="mt-1 text-gray-600">{{ booking.project_details }}</p>
                  </div>
                </div>
                <div class="ml-4 flex-shrink-0 flex space-x-2">
                  <button
                    @click="handleApprove(booking.id)"
                    class="inline-flex items-center px-3 py-1.5 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                    :disabled="loading"
                  >
                    <svg class="-ml-0.5 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                    Approve
                  </button>
                  <button
                    @click="handleReject(booking.id)"
                    class="inline-flex items-center px-3 py-1.5 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                    :disabled="loading"
                  >
                    <svg class="-ml-0.5 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                    Reject
                  </button>
                </div>
              </div>
            </li>
          </ul>
        </div>

        <!-- Upcoming Sessions Card -->
        <div class="bg-white shadow rounded-lg overflow-hidden">
          <div class="px-6 py-5 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">Upcoming Sessions</h3>
            <p class="mt-1 text-sm text-gray-500">Confirmed bookings</p>
          </div>
          
          <div v-if="upcomingBookings.length === 0" class="p-6 text-center text-gray-500">
            No upcoming sessions scheduled.
          </div>
          
          <ul v-else class="divide-y divide-gray-200">
            <li v-for="booking in upcomingBookings" :key="`upcoming-${booking.id}`" class="px-6 py-4 hover:bg-gray-50 transition-colors">
              <div class="flex items-center justify-between">
                <div class="flex-1 min-w-0">
                  <div class="flex items-center space-x-3">
                    <p class="text-sm font-medium text-gray-900">{{ booking.client_name }}</p>
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                      Confirmed
                    </span>
                  </div>
                  <div class="mt-1 text-sm text-gray-500">
                    <p>{{ formatDate(booking.preferred_dates[0]) }}</p>
                    <p class="mt-1 text-gray-600">{{ booking.project_details }}</p>
                  </div>
                </div>
                <div class="ml-4 flex-shrink-0">
                  <button
                    @click="handleCancel(booking.id)"
                    class="inline-flex items-center px-3 py-1.5 border border-red-300 text-sm leading-4 font-medium rounded-md text-red-700 bg-white hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                    :disabled="loading"
                  >
                    <svg class="-ml-0.5 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                    </svg>
                    Cancel
                  </button>
                </div>
              </div>
            </li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</template>
